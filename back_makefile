
NAME        = cub3D
CC          = gcc
RM          = rm -f
MKDIR       = mkdir -p

# Compilation flags
CFLAGS      = -Wall -Wextra -Werror
DEBUGFLAGS  = -g -DDEBUG
SANITIZEFLAGS = -fsanitize=address -fsanitize=undefined -g

# Parallel compilation
MAKEFLAGS  += -j$(shell nproc 2>/dev/null || echo 4)

# Detect OS
UNAME       := $(shell uname)

# Paths
PATH_MLX    = mlx
PATH_DELAY  = delay
PATH_BASS   = bass
DEPDIR      = .deps

# Dependency flags for automatic dependency generation
DEPFLAGS    = -MT $@ -MMD -MP -MF $(DEPDIR)/$*.d

# ===================== SOURCES ===================== #

# Core sources
SRC_CORE = \
	parser/cub_file.c \
	parser/cub_map_parser.c \
	parser/cub_map_setter.c \
	parser/cub_parser.c \
	parser/cub_setter.c \
	pathfinder/cub_astar.c \
	pathfinder/cub_node.c \
	pathfinder/cub_node_helper.c \
	pathfinder/cub_path.c \
	pathfinder/cub_pathfinder.c \
	pathfinder/cub_star_cardinal.c \
	render/cub_bitmap.c \
	render/cub_blur.c \
	render/cub_floor.c \
	render/cub_hud.c \
	render/cub_minimap.c \
	render/cub_raycast.c \
	render/cub_raycast2.c \
	render/cub_raycast3.c \
	render/cub_texture.c \
	render/cub_xquartz_layer.c \
	sprites/cub_doors.c \
	sprites/cub_goomba.c \
	sprites/cub_sprite_list.c \
	sprites/cub_sprites.c \
	utils/cub_checker.c \
	utils/cub_cleaner.c \
	utils/cub_error.c \
	utils/cub_keybinds.c \
	utils/cub_line_reader.c \
	utils/cub_line_reader_helper.c \
	utils/cub_rot.c \
	utils/cub_setup.c \
	utils/cub_utils.c \
	utils/cub_utils2.c \
	utils/cub_utils3.c \
	utils/cub_utils4.c \
	utils/cub_utils5.c \
	utils/cub_vec.c \
	utils/cub_vec2.c \
	world/cub_cardinal.c \
	world/cub_collide.c \
	world/cub_map.c \
	world/cub_player.c \
	world/cub_portal.c \
	world/cub_portal2.c \
	world/cub_portal_list.c \
	main.c

# Bonus sources
SRC_BONUS = \
	bonus/cub_sound_bonus.c \
	bonus/cub_other_bonus.c

# Non-bonus sources (alternative to bonus)
SRC_OPTIONAL = \
	other/cub_other.c \
	other/cub_sound.c

# ===================== HEADERS ===================== #

HDR_FILES = \
	bonus/cub_sound_bonus.h \
	delay/libdelay.h \
	include/bmp_partial_alligned_header.h \
	include/cub_cardinal_enum.h \
	include/cub_floor_render.h \
	include/cub_keybinds_struct.h \
	include/cub_mouseover_struct.h \
	include/cub_player_struct.h \
	include/cub_portal_struct.h \
	include/cub_raycast_struct.h \
	include/cub_sprite_struct.h \
	include/cub_sprite_type.h \
	include/cub_walls.h \
	main.h \
	other/cub_sound.h \
	parser/cub_file.h \
	parser/cub_map_parser.h \
	parser/cub_map_setter.h \
	parser/cub_parser.h \
	parser/cub_setter.h \
	pathfinder/cub_astar.h \
	pathfinder/cub_path.h \
	pathfinder/cub_pathfinder.h \
	pathfinder/cub_star_cardinal.h \
	pathfinder/cub_node.h \
	render/cub_bitmap.h \
	render/cub_blur.h \
	render/cub_floor.h \
	render/cub_hud.h \
	render/cub_minimap.h \
	render/cub_raycast.h \
	render/cub_texture.h \
	render/cub_xquartz_layer.h \
	sprites/cub_doors.h \
	sprites/cub_goomba.h \
	sprites/cub_sprite_list.h \
	sprites/cub_sprites.h \
	utils/cub_checker.h \
	utils/cub_cleaner.h \
	utils/cub_error.h \
	utils/cub_keybinds.h \
	utils/cub_rot.h \
	utils/cub_setup.h \
	utils/cub_utils.h \
	utils/cub_vec.h \
	utils/cub_line_reader.h \
	world/cub_cardinal.h \
	world/cub_collide.h \
	world/cub_map.h \
	world/cub_player.h \
	world/cub_portal.h \
	world/cub_portal_list.h \
	cub3D.h

# ===================== OBJECTS ===================== #

OBJS_CORE      = ${SRC_CORE:.c=.o}
OBJS_BONUS     = ${SRC_BONUS:.c=.o}
OBJS_OPTIONAL  = ${SRC_OPTIONAL:.c=.o}

# ===================== FLAGS ===================== #

# Base linking flags
FLAGS_BASE = -I$(PATH_MLX) -L$(PATH_MLX) -lmlx -lm -lXext -lX11 \
			 -I$(PATH_DELAY) -L$(PATH_DELAY) -ldelay \
			 -Wl,-rpath=./$(PATH_BASS)/,-rpath=./$(PATH_MLX)/,-rpath=./$(PATH_DELAY)/

# Bonus linking flags (includes BASS library)
FLAGS_BONUS = -I$(PATH_BASS) -L$(PATH_BASS) -lbass \
			  -I$(PATH_DELAY) -L$(PATH_DELAY) -ldelay \
			  $(FLAGS_BASE)

# ===================== RULES ===================== #

# Default target
all: $(NAME)

# Create dependency directory
$(DEPDIR):
	@$(MKDIR) $(DEPDIR)

# Compile object files with automatic dependencies
%.o: %.c Makefile | $(DEPDIR)
	@echo "üî® Compiling $<"
	@$(CC) $(CFLAGS) $(DEPFLAGS) -I$(PATH_MLX) -I$(PATH_BASS) -c $< -o $@ -D LINUX=true

# Include dependency files
-include $(wildcard $(DEPDIR)/*.d)

# Build mandatory version
$(NAME): $(OBJS_CORE) $(OBJS_OPTIONAL)
	@echo "üöÄ Building mandatory version..."
	@make -C $(PATH_MLX) > /dev/null 2>&1
	@make -C $(PATH_DELAY) > /dev/null 2>&1
	@$(CC) $(CFLAGS) -o $(NAME) $(OBJS_CORE) $(OBJS_OPTIONAL) $(FLAGS_BASE)
	@echo "‚úÖ $(NAME) built successfully!"

# Build bonus version
bonus: $(OBJS_CORE) $(OBJS_BONUS)
	@echo "üéÆ Building bonus version..."
	@make -C $(PATH_MLX) > /dev/null 2>&1
	@make -C $(PATH_DELAY) > /dev/null 2>&1
	@$(CC) $(CFLAGS) -o $(NAME) $(OBJS_CORE) $(OBJS_BONUS) $(FLAGS_BONUS)
	@echo "‚úÖ $(NAME) bonus built successfully!"

# Debug version with debug symbols
debug: CFLAGS += $(DEBUGFLAGS)
debug: $(OBJS_CORE) $(OBJS_OPTIONAL)
	@echo "üêõ Building debug version..."
	@make -C $(PATH_MLX) > /dev/null 2>&1
	@make -C $(PATH_DELAY) > /dev/null 2>&1
	@$(CC) $(CFLAGS) -o $(NAME) $(OBJS_CORE) $(OBJS_OPTIONAL) $(FLAGS_BASE)
	@echo "‚úÖ $(NAME) debug built successfully!"

# Debug bonus version
debug-bonus: CFLAGS += $(DEBUGFLAGS)
debug-bonus: $(OBJS_CORE) $(OBJS_BONUS)
	@echo "üêõ Building debug bonus version..."
	@make -C $(PATH_MLX) > /dev/null 2>&1
	@make -C $(PATH_DELAY) > /dev/null 2>&1
	@$(CC) $(CFLAGS) -o $(NAME) $(OBJS_CORE) $(OBJS_BONUS) $(FLAGS_BONUS)
	@echo "‚úÖ $(NAME) debug bonus built successfully!"

# Sanitize version with address sanitizer
sanitize: CFLAGS += $(SANITIZEFLAGS)
sanitize: $(OBJS_CORE) $(OBJS_OPTIONAL)
	@echo "üß™ Building sanitize version..."
	@make -C $(PATH_MLX) > /dev/null 2>&1
	@make -C $(PATH_DELAY) > /dev/null 2>&1
	@$(CC) $(CFLAGS) -o $(NAME) $(OBJS_CORE) $(OBJS_OPTIONAL) $(FLAGS_BASE)
	@echo "‚úÖ $(NAME) sanitize built successfully!"

# Sanitize bonus version
sanitize-bonus: CFLAGS += $(SANITIZEFLAGS)
sanitize-bonus: $(OBJS_CORE) $(OBJS_BONUS)
	@echo "üß™ Building sanitize bonus version..."
	@make -C $(PATH_MLX) > /dev/null 2>&1
	@make -C $(PATH_DELAY) > /dev/null 2>&1
	@$(CC) $(CFLAGS) -o $(NAME) $(OBJS_CORE) $(OBJS_BONUS) $(FLAGS_BONUS)
	@echo "‚úÖ $(NAME) sanitize bonus built successfully!"

# Clean object files and dependencies
clean:
	@echo "üßπ Cleaning object files and dependencies..."
	@$(RM) -r $(DEPDIR)
	@$(RM) $(OBJS_CORE) $(OBJS_BONUS) $(OBJS_OPTIONAL)
	@make -C $(PATH_MLX) clean > /dev/null 2>&1
	@make -C $(PATH_DELAY) clean > /dev/null 2>&1
	@echo "‚úÖ Clean completed!"

# Full clean (includes executable)
fclean: clean
	@echo "üßπ Full cleaning..."
	@make -C $(PATH_DELAY) fclean > /dev/null 2>&1
	@$(RM) $(NAME)
	@echo "‚úÖ Full clean completed!"

# Rebuild everything
re: fclean all

# Rebuild bonus
rebonus: fclean bonus

# Run norminette
norm:
	@echo "üîç Running Norminette..."
	@norminette $(SRC_CORE) $(SRC_BONUS) $(SRC_OPTIONAL) $(HDR_FILES)
	@echo "‚úÖ Norminette completed!"

# Show help
help:
	@echo "üöÄ Cub3D Makefile Help"
	@echo ""
	@echo "üìã Available targets:"
	@echo "  all          - Build mandatory version (default)"
	@echo "  bonus        - Build bonus version"
	@echo "  debug        - Build debug version"
	@echo "  debug-bonus  - Build debug bonus version"
	@echo "  sanitize     - Build with address sanitizer"
	@echo "  sanitize-bonus - Build bonus with address sanitizer"
	@echo "  clean        - Remove object files and dependencies"
	@echo "  fclean       - Remove everything (objects + executable)"
	@echo "  re           - Rebuild mandatory version"
	@echo "  rebonus      - Rebuild bonus version"
	@echo "  norm         - Run norminette"
	@echo "  help         - Show this help"
	@echo ""
	@echo "üí° Examples:"
	@echo "  make          # Build mandatory"
	@echo "  make bonus    # Build bonus"
	@echo "  make debug    # Build debug version"
	@echo "  make clean    # Clean files"

# Phony targets
.PHONY: all bonus debug debug-bonus sanitize sanitize-bonus clean fclean re rebonus norm help
