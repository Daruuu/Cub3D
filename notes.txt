#include <fcntl.h>
#include <sys/stat.h>
#include <unistd.h>
#include <stdio.h>

#define INVALID_LEN_FILE_MAP     "Error: Map filename too short.\n"
#define INVALID_MAP_EXTENSION    "Error: Invalid map extension. Expected '.cub'.\n"
#define ERROR_INVALID_FILENAME   "Error: Filename contains invalid characters.\n"
#define ERROR_FILE_NOT_FOUND     "Error: Map file could not be opened.\n"
#define ERROR_IS_DIRECTORY       "Error: The given map is a directory, not a file.\n"

static int	has_cub_extension(char *filename)
{
	const char	*extension = ".cub";
	int			len_filename = ft_strlen(filename);
	int			len_extension = ft_strlen(extension);

	// Si el nombre del archivo es más corto que ".cub", no es válido
	if (len_filename < len_extension)
		return (0);

	// Comparamos los últimos caracteres del nombre con ".cub"
	if (ft_strncmp(&filename[len_filename - len_extension], extension, len_extension) == 0)
		return (1);

	return (0);
}




static int	is_valid_filename_length(char *filename)
{
	return (ft_strlen(filename) > 4);
}

static int	has_invalid_chars(char *filename)
{
	while (*filename)
	{
		if (*filename == '*' || *filename == '?' || *filename == ':' ||
			*filename == '<' || *filename == '>' || *filename == '|')
			return (1);
		filename++;
	}
	return (0);
}

int validate_map_filename(char *filename)
{
	struct stat	sb;

	if (!is_valid_filename_length(filename))
		return (printf(INVALID_LEN_FILE_MAP), 1);
	if (!has_cub_extension(filename))
		return (printf(INVALID_MAP_EXTENSION), 1);
	if (has_invalid_chars(filename))
		return (printf(ERROR_INVALID_FILENAME), 1);

	if (open(filename, O_RDONLY) < 0)
		return (printf(ERROR_FILE_NOT_FOUND), 1);

	if (stat(filename, &sb) == 0 && S_ISDIR(sb.st_mode))
		return (printf(ERROR_IS_DIRECTORY), 1);

	return (0);
}


// ======= PARSER_FILE =======


//  FUNCTIONS WITHOUT USING:
srcs/parsing_file/parsing_file();

    int	set_map_dimensions(t_parser *map_info);
    int	check_map_dimensions(t_parser *map_info);



// ======= PARSER_MAP =======

//  FUNCTIONS WITHOUT USING:
srcs/parser_map/check_extension_and_player.c

    void	get_player_init_pos(t_parser *map_data);

//  FUNCTIONS WITHOUT USING:
srcs/parser_map/check_items.c

    int	validation_items_in_map(t_parser *map_info);














